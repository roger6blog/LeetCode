'''

Given an integer matrix,
find the length of the longest increasing path.

From each cell,
you can either move to four directions: left, right, up or down.
You may NOT move diagonally or move outside of the boundary
(i.e. wrap-around is not allowed).

Example 1:

Input: nums =
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:

Input: nums =
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6].
Moving diagonally is not allowed.


'''

import os


class Solution(object):
    def __init__(self):
        self.longestpath = 1
        self.currx = 0
        self.curry = 0

    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        if not matrix:
            return 0

        row = len(matrix)
        col = len(matrix[0])

        for x in xrange(row):
            for y in xrange(col):
                visited = []
                #print "======"
                self.dfs(row, col, x, y, matrix, visited)
        return self.longestpath

    def dfs(self, row, col, x, y, matrix, visited):
        if x >= row or y >= col or x < 0 or y < 0:
            return
        #print("Start from matrix[{}][{}] = {}".format(x, y, matrix[x][y]))


        if len(visited) > 1:
            if visited[-1].keys()[0][0] != x and visited[-1].keys()[0][1] != y:
                return



        if visited != []:
            if matrix[x][y] <= visited[-1].values()[0]:
                #print("matrix[{}][{}] = {} <= {}".format(x, y, matrix[x][y], visited[-1]))
                return

        visited.append({(x, y):matrix[x][y]})

        self.longestpath = max(self.longestpath, len(visited))
        #print self.longestpath, visited

        self.dfs(row, col, x, y + 1, matrix, visited)
        self.dfs(row, col, x, y - 1, matrix, visited)
        self.dfs(row, col, x + 1, y, matrix, visited)
        self.dfs(row, col, x - 1, y, matrix, visited)

        visited.pop()

    def longestIncreasingPath2(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        if not matrix:
            return 0

        def longestpath(matrix, i, j, dp):
            # Dynamic Programming keypoint
            if dp[i][j]:
                return dp[i][j]

            row = len(matrix)
            col = len(matrix[0])
            max_depth = 0
            directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
            for dx, dy in directions:
                x = i + dx
                y = j + dy
                if 0 <= x < row and 0 <= y < col and matrix[x][y] > matrix[i][j]:
                    max_depth = max(max_depth, longestpath(matrix, x, y, dp))

            # Write total deep to corresponding coordinate of dp matrix
            dp[i][j] = max_depth + 1
            return dp[i][j]

        ans = 0
        dp = []
        row = len(matrix)
        col = len(matrix[0])

        # construct dp matrix with filling 0
        for i in xrange(row):
            dp.append([])
            for j in xrange(col):
                dp[i].append(0)
        # one line construction
        # dp = [[0 for _ in xrange(col)] for _ in xrange(row)]


        for i in xrange(row):
            for j in xrange(col):
                ans = max(ans, longestpath(matrix, i, j, dp))

        return ans
a = [
    [9,9,4],
    [6,6,8],
    [2,1,1]
]

b = [
    [3,4,5],
    [3,2,6],
    [2,2,1]
]

c = [
    [6,8],
    [7,2]
]


d = [
    [7,7,5],
    [2,4,6],
    [8,2,0]
]

e = [[1,4,7,9],
     [0,3,8,5],
     [3,6,0,6],
     [1,4,5,6]
]


f = [
    [7,6,1,1],
    [2,7,6,0],
    [1,3,5,1],
    [6,6,3,2]
]

ffffffff= [[58,55,59,93,4,31,22,29,71,26,88,28,62,1,12,73,65,75,46,21,55,98,60,79,14,49,12,45,80,80,44,52,99,48,53,22,48,82,90,26,17,42,73,98,58,77,44,53,86,88,10,99,92,28,81,90,45,72,60,34,2,90,77,41,62,23,56,26,10,84,24,5,98,33,56,96,51,22,7,84,68,13,37,54,29,20,29,37,82,68,67,62,14,95,83,40,67,14,37,66,79,47,16,54,2,47,45,59,23,95,65,27,53,5,16,95,50],[66,61,25,39,16,79,45,39,2,66,80,58,32,2,25,38,33,78,45,17,3,97,87,87,82,94,65,31,85,85,2,0,2,33,1,13,9,15,83,70,69,26,97,87,43,9,53,28,59,65,94,35,77,63,59,14,89,97,6,0,80,10,99,27,0,33,5,8,62,0,79,26,86,86,47,30,47,5,27,32,46,70,86,8,1,67,80,92,58,56,66,90,82,75,25,46,48,37,25,56,3,73,45,92,2,55,78,91,64,39,14,79,48,5,31,88,8],[13,69,98,15,0,85,23,72,74,77,5,37,20,69,9,93,6,67,51,38,93,26,46,11,86,48,13,10,90,47,36,58,6,40,96,89,44,20,85,65,85,26,54,21,91,89,84,11,95,55,36,20,11,20,83,4,58,90,25,72,84,93,38,62,73,54,61,8,99,1,39,62,63,49,2,66,70,10,59,61,61,13,3,89,83,6,19,85,27,27,63,22,33,93,11,64,42,26,26,16,76,38,0,82,97,22,76,9,5,30,87,56,63,35,91,53,75],[22,68,45,74,44,52,91,43,71,20,49,22,58,50,29,20,90,18,93,22,49,21,95,67,23,69,76,37,71,16,71,96,75,43,1,9,29,28,93,26,64,11,88,28,59,14,3,19,57,32,32,82,29,64,82,5,88,67,91,47,25,67,45,22,77,44,75,63,2,50,11,88,50,69,17,24,56,41,37,53,19,65,66,25,34,90,51,7,33,6,72,46,27,56,62,24,53,44,86,97,94,18,68,7,3,59,5,18,47,80,1,9,36,99,51,79,62],[2,30,29,46,3,48,13,15,98,73,84,21,53,83,1,77,21,18,85,10,3,3,35,21,74,77,52,29,1,20,73,87,62,2,95,84,20,77,44,61,82,16,68,67,32,94,90,65,87,47,71,27,79,84,34,89,4,3,58,45,99,69,66,58,54,61,76,66,27,43,20,66,11,17,21,53,90,21,88,92,63,0,12,82,81,59,43,89,94,61,31,87,37,45,55,90,51,74,93,83,62,12,36,62,10,85,30,41,21,46,32,79,6,85,79,71,3],[41,71,22,91,20,7,37,39,56,63,92,25,52,58,57,59,43,40,17,86,53,61,58,35,33,44,81,51,22,15,15,59,29,4,99,91,84,37,99,5,39,66,96,71,89,47,15,33,25,0,42,4,87,52,61,66,40,87,55,71,47,21,37,91,51,76,41,7,74,6,55,51,5,60,21,37,79,79,21,59,92,33,86,15,8,48,88,40,38,18,77,45,0,93,12,34,56,71,0,87,87,18,86,1,46,93,40,52,28,7,64,39,60,34,45,12,87],[73,41,55,72,87,10,2,69,11,2,67,31,43,83,30,82,33,81,23,11,14,33,68,90,71,58,40,15,51,50,82,30,7,22,81,88,53,99,9,61,78,82,68,24,34,99,5,90,22,91,33,87,18,79,44,82,71,1,69,28,93,34,30,52,45,49,68,14,64,36,67,42,67,13,12,76,3,64,11,43,11,16,27,23,58,11,49,52,43,84,40,64,35,16,47,1,64,21,22,29,16,16,80,46,46,81,55,2,39,53,52,40,94,8,49,82,68],[81,10,40,98,79,12,97,5,17,14,52,16,58,46,61,30,24,71,3,31,4,28,59,1,43,86,87,44,11,72,0,98,8,71,14,85,10,13,35,27,85,3,46,37,57,91,19,57,96,8,39,69,52,73,54,45,38,42,58,96,21,6,34,48,81,6,13,56,53,7,45,42,20,25,32,26,52,27,38,46,71,44,39,34,11,61,56,63,33,31,30,12,71,56,40,64,88,73,75,47,85,77,3,69,45,24,20,37,53,21,74,43,54,71,47,8,44],[76,48,20,61,46,63,78,64,22,0,12,60,52,2,21,92,5,58,64,25,53,3,56,38,89,16,58,36,56,7,28,88,30,54,95,34,82,70,83,52,5,52,83,26,60,12,76,96,26,17,72,47,20,85,71,73,51,71,51,79,72,55,77,65,79,11,32,15,29,57,78,75,19,40,77,61,84,3,58,76,28,16,59,24,96,82,0,86,10,0,96,21,30,55,29,72,31,62,79,29,31,44,77,45,45,71,43,19,69,80,55,0,11,48,92,92,90],[82,81,3,36,54,71,94,82,30,74,86,6,4,53,12,37,57,66,90,4,57,72,5,2,84,29,33,7,24,60,42,65,9,0,17,32,66,47,43,38,78,81,38,84,0,37,87,59,7,14,51,10,3,56,14,68,21,78,33,64,9,33,28,50,22,19,57,82,59,32,80,67,50,70,16,61,46,39,55,60,18,65,18,37,32,60,32,91,72,8,13,23,18,13,99,72,55,34,17,54,25,67,41,36,57,68,84,73,15,60,79,8,69,95,89,43,5],[38,0,94,76,9,18,66,44,83,50,32,90,51,75,28,9,87,41,50,36,45,78,8,22,3,53,80,82,71,11,34,80,28,22,54,59,9,3,14,14,76,63,21,25,72,94,68,38,80,85,80,40,7,11,67,12,48,14,0,47,70,44,32,20,46,53,74,28,26,20,95,56,62,86,20,14,70,23,94,61,42,52,24,51,31,13,8,84,67,77,27,73,8,8,7,23,82,38,98,15,86,17,45,95,52,45,73,82,49,72,74,96,70,99,38,10,76],[38,64,94,61,28,66,72,61,48,86,69,34,0,87,39,14,99,57,22,62,66,22,85,69,50,13,22,75,18,23,65,4,85,71,67,73,32,92,40,9,90,48,98,9,60,97,61,74,92,89,37,57,73,54,83,41,74,93,25,5,97,86,88,41,50,70,11,83,93,5,17,83,12,35,71,24,54,67,14,82,58,74,61,84,76,95,52,82,75,35,65,5,83,72,18,56,93,79,40,92,94,3,7,8,45,94,80,90,45,6,16,21,48,13,22,51,61],[45,76,60,41,59,78,46,73,49,73,13,39,95,24,2,32,35,38,12,17,96,3,23,87,37,16,80,74,84,62,98,68,33,27,27,8,82,33,68,66,80,68,64,22,3,31,20,18,28,42,91,44,35,3,47,53,93,82,51,20,0,32,10,99,27,48,11,84,6,62,52,75,98,26,36,32,9,36,95,49,72,14,76,35,94,97,26,46,34,2,86,2,98,77,6,28,66,49,75,66,92,72,64,96,58,32,34,68,3,99,69,85,59,44,60,36,49],[51,37,20,82,80,21,36,4,83,91,11,83,20,8,36,29,75,66,20,44,39,30,10,27,81,33,81,10,70,31,41,44,81,15,60,16,16,7,55,36,22,79,10,21,59,70,24,87,59,62,20,54,1,52,14,79,1,23,42,56,29,61,49,91,74,5,5,58,9,65,66,88,16,28,22,73,52,61,81,7,37,42,76,1,27,95,92,21,71,91,40,70,98,50,8,54,86,22,12,24,49,39,69,2,4,37,30,58,92,16,3,46,21,76,19,80,57],[45,89,31,24,10,79,96,95,29,50,49,81,14,57,83,90,69,36,17,87,67,24,57,71,9,10,82,66,7,18,44,39,40,52,95,71,87,42,17,89,67,87,84,24,57,87,3,6,82,3,96,43,72,85,97,33,82,39,97,20,35,37,20,13,57,4,99,89,86,81,41,84,84,40,63,99,27,67,31,71,39,54,57,28,46,77,55,98,35,52,57,24,57,35,13,67,7,15,66,13,56,34,70,91,32,39,74,77,61,13,40,90,40,94,15,20,45],[63,26,30,6,55,20,9,40,25,2,12,40,52,40,92,36,91,69,64,2,74,53,30,54,20,25,39,57,42,61,82,51,56,39,1,33,95,1,67,8,99,37,82,74,0,60,97,10,84,96,18,36,88,72,31,43,33,10,2,10,21,89,35,38,31,57,22,30,56,3,47,10,40,62,39,54,61,88,96,19,83,63,72,40,81,59,91,14,72,1,91,22,81,82,29,17,22,61,99,34,34,72,84,1,57,10,21,48,1,27,38,57,46,9,20,98,17],[38,50,9,28,99,42,38,42,8,12,24,34,15,30,24,13,35,15,57,14,97,38,83,62,25,50,3,50,15,76,72,73,1,97,4,22,19,35,30,34,75,39,8,42,30,88,55,26,47,3,38,74,2,47,4,38,6,32,66,66,24,33,8,59,5,39,81,49,62,77,54,22,82,90,96,0,58,6,50,51,70,65,65,38,5,4,7,32,49,37,83,3,97,84,4,21,44,65,82,19,95,26,37,7,51,82,8,85,65,26,98,10,75,59,13,46,99],[13,4,77,64,81,67,20,85,67,34,62,51,86,94,82,24,84,1,60,97,70,61,60,96,9,63,46,6,64,86,93,12,78,47,79,18,39,49,87,33,35,74,50,23,87,73,6,93,45,20,97,56,58,62,18,37,71,28,91,71,29,65,24,43,91,47,95,91,35,50,14,97,68,94,53,82,3,0,96,19,91,31,34,92,55,43,91,92,20,91,89,78,9,0,66,37,11,6,58,55,1,21,45,44,33,92,43,94,50,74,4,85,63,13,27,33,24],[88,83,60,3,46,29,2,73,33,45,49,12,26,91,14,94,74,17,70,52,97,33,37,89,31,34,56,73,72,44,95,34,50,97,94,90,22,9,49,3,76,11,44,85,43,86,69,70,81,14,52,64,25,49,80,35,20,81,68,37,90,22,35,52,4,9,1,36,39,95,6,98,3,80,61,77,43,63,10,24,55,8,94,88,36,17,96,56,27,86,0,43,92,4,79,99,6,85,18,44,48,66,37,91,56,73,37,93,44,30,18,36,58,78,95,2,1],[28,47,65,78,56,88,11,29,70,64,82,16,15,88,7,27,50,50,65,18,2,59,18,55,88,97,78,93,85,43,96,85,42,51,58,33,5,45,68,99,40,66,97,95,24,4,42,90,47,30,65,6,39,76,2,64,43,15,92,17,65,63,51,72,68,23,25,94,50,39,76,68,66,57,5,62,55,66,19,38,62,79,34,99,3,79,82,51,97,81,47,36,17,71,59,46,0,94,89,91,58,73,21,69,12,58,33,66,81,80,59,54,33,82,24,17,39],[5,50,24,41,73,5,25,34,74,84,43,12,54,91,43,15,20,53,98,7,55,93,77,38,9,2,88,10,83,0,0,26,98,17,74,55,60,97,84,51,61,2,54,58,70,1,19,62,15,90,79,45,21,34,93,25,83,28,38,16,62,1,25,9,45,73,26,47,70,52,13,61,47,1,16,60,41,62,18,50,47,73,39,8,48,52,13,51,62,41,25,39,95,52,30,72,74,37,84,78,4,1,73,28,77,25,45,65,25,15,36,64,67,90,8,75,89],[85,18,76,48,37,69,43,23,44,38,26,86,49,31,98,88,16,19,32,2,38,37,98,29,79,41,20,88,38,11,18,42,80,82,3,82,99,85,28,76,93,54,0,69,24,37,81,84,98,64,60,91,55,7,61,49,15,93,2,93,10,43,37,21,18,31,81,58,49,15,71,67,32,92,42,18,31,48,82,86,86,74,61,0,66,64,95,17,34,85,29,55,77,35,13,12,41,97,77,40,69,53,18,65,24,75,12,50,75,45,69,16,1,39,78,75,61],[4,93,40,92,92,57,6,42,10,56,85,69,86,45,71,28,16,15,52,74,47,97,44,22,35,86,68,90,19,12,79,17,47,54,8,42,71,84,9,77,77,88,42,60,36,43,44,87,55,13,70,85,65,25,41,77,64,65,32,86,72,87,86,71,53,58,24,4,41,88,92,49,48,8,85,93,62,35,22,36,68,88,69,89,59,30,28,40,6,87,42,68,68,38,8,53,13,73,20,44,42,30,28,20,23,28,72,61,77,82,26,44,97,32,31,59,76]]

print Solution().longestIncreasingPath2(f)